#!/bin/bash

cd "$(dirname "$0")"
source ./config.sh

log_error() {
    echo "$(date) - ERROR: $1" >> "$LOG_BOT_FILE"
}

log_warn() {
    echo "$(date) - WARN: $1" >> "$LOG_BOT_FILE"
}

log_info() {
    echo "$(date) - INFO: $1" >> "$LOG_BOT_FILE"
}

generate_dummy_keypair() {
    if [[ -f "$DUMMY_KEYPAIR_PATH" ]]; then
        log_info "–ö–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $DUMMY_KEYPAIR_PATH"
        return 0
    fi

    solana-keygen new -o "$DUMMY_KEYPAIR_PATH" --no-passphrase > /dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á"
        send_message "${NOK_ICON} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"
        return 1
    fi

    log_info "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á: $DUMMY_KEYPAIR_PATH"
    send_message "${OK_ICON} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á: <code>${DUMMY_KEYPAIR_PATH}</code>" true
}

send_message() {
    local message=$1
    local remove_keyboard=${2:-false}

    local payload="chat_id=$BOT_ID&text=$message&parse_mode=HTML"
    if [[ "$remove_keyboard" == "true" ]]; then
        payload="$payload&reply_markup=$(jq -nc '{remove_keyboard: true}')"
    fi

    res=$(curl -s -X POST "$TELEGRAM_SEND_URL" -d "$payload")

    if [[ $(echo "$res" | jq -r '.ok') != "true" ]]; then
        log_error "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $message"
        return 1
    fi
}

generate_keyboard() {
    local action_text="$1"
    shift
    buttons=""

    for button_text in "$@"; do
        buttons="$buttons, [{\"text\":\"$button_text\"}]"
    done

    keyboard="{\"keyboard\": [${buttons:2}], \"one_time_keyboard\": true}"

    res=$(curl -s -X POST $TELEGRAM_SEND_URL -d chat_id=$BOT_ID -d text="$action_text" -d reply_markup="$keyboard")

    if [[ $(echo "$res" | jq -r '.ok') != "true" ]]; then
        log_error "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: $keyboard"
    fi
}

set_bot_commands() {
    res=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/setMyCommands" -H "Content-Type: application/json" -d '{
        "commands": [
            {"command": "update", "description": "–û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É"},
            {"command": "history_update", "description": "–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"},
            {"command": "service", "description": "–°–µ—Ä–≤–∏—Å"},
            {"command": "catchup", "description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"},
            {"command": "monitor_agave", "description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"},
            {"command": "validators", "description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤"},
            {"command": "halt_node", "description": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É –ø–æ —Ç–∞–π–º–µ—Ä—É"},
            {"command": "get_log_bot", "description": "–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"},
            {"command": "log_service", "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞"},
            {"command": "reboot", "description": "!!! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–¥—É"}
        ]
    }')

    if [[ $(echo "$res" | jq -r '.ok') != "true" ]]; then
        log_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é"
        return 1
    fi

    send_main_menu
}

send_main_menu() {
    local message+="<b>/update</b> - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã%0A%0A"
    message+="<b>/history_update</b> - —Å–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π%0A%0A"
    message+="<b>/service</b> - –†–µ—Å—Ç–∞—Ä—Ç/–°—Ç–∞—Ä—Ç/–°—Ç–æ–ø/–í–µ—Ä—Å–∏—è%0A%0A"
    message+="<b>/catchup</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏%0A%0A"
    message+="<b>/monitor_agave</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏%0A%0A"
    message+="<b>/validators</b> - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤%0A%0A"
    message+="<b>/log_service</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞%0A%0A"
    message+="<b>/halt_node</b> - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É –ø–æ —Ç–∞–π–º–µ—Ä—É%0A%0A"
    message+="<b>/get_log_bot</b> - —Å–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞%0A%0A"

    if [[ $CLIENT == $CLIENT_FIREDANCER ]]; then
        message+="<b>/get_log_install</b> - —Å–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏%0A%0A"
    fi
    message+="<b>/reboot</b> - !!! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–¥—É%0A%0A"

    res=$(curl -s -X POST "$TELEGRAM_SEND_URL" \
        -d chat_id="$BOT_ID" \
        -d text="$message" \
        -d parse_mode="HTML")

    if [[ $(echo "$res" | jq -r '.ok') != "true" ]]; then
        log_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é"
        return 1
    fi

    res=$(curl -s -X POST "$TELEGRAM_SEND_URL" \
        -d chat_id="$BOT_ID" \
        -d text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥" \
        -d reply_markup='{"remove_keyboard": true}')

    if [[ $(echo "$res" | jq -r '.ok') != "true" ]]; then
        log_error "–û—à–∏–±–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
        return 1
    fi
}

send_version_menu() {
    if [[ -z "$GITHUB_TOKEN" ]]; then
        send_message "üîß –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –≤—Ä—É—á–Ω—É—é –±–µ–∑ v, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GITHUB_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞."
        return
    fi

    mapfile -t versions < <(get_versions)
    generate_keyboard "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:" "${versions[@]}"
}

send_file() {
    local file_path="$1"

    if [[ ! -f "$file_path" ]]; then
        send_message "–§–∞–π–ª '$file_path' –Ω–µ –Ω–∞–π–¥–µ–Ω!" true
        return 1
    fi

    res=$(curl -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendDocument" \
        -F "chat_id=${BOT_ID}" \
        -F "document=@${file_path}")

    if [[ $(echo "$res" | jq -r '.ok') != "true" ]]; then
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: ${file_path}."
        return 1
    fi
}

get_updates() {
    local offset=$1
    curl -s -X GET "https://api.telegram.org/bot${TELEGRAM_TOKEN}/getUpdates?offset=${offset}"
}

get_versions() {
    repo=""
    if [[ $CLIENT == $CLIENT_FIREDANCER ]]; then
        repo="firedancer-io/firedancer"
    elif [[ $CLIENT == $CLIENT_AGAVE ]]; then
        repo="anza-xyz/agave"
    else
        log_error "–ó–∞–¥–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"
        return 1
    fi
    api_url="https://api.github.com/repos/$repo/tags"

    curl -s -H "Authorization: token $GITHUB_TOKEN" "$api_url" | jq -r '.[0:5] | .[] | .name' | sed 's/^v//'
}

#States
STATE_MAIN_MENU="main_menu"

STATE_SERVICE="service"
STATE_SERVICE_UNSAFE="service_unsafe"

STATE_UPDATE="update"
STATE_UPDATE_2="update_2"

STATE_LOG="log"
STATE_LOG_2="log_2"

STATE_HALT_DATETIME="halt_datetime"

STATE_REBOOT="reboot"

CURRENT_STATE=$STATE_MAIN_MENU

update() {
    local command="$1"
    case "$command" in
        "/start")
            send_message "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–æ–¥—ã Solana"
            send_main_menu
            ;;

        "/update")
            CURRENT_STATE=$STATE_UPDATE
            send_version_menu
            ;;

        "/service")
            CURRENT_STATE=$STATE_SERVICE
            generate_keyboard "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" "start" "stop" "restart" "version"
            ;;

        "/history_update")
            send_file "$UPDATE_HISTORY_FILE"
            ;;

        "/get_log_bot")
            send_file "$LOG_BOT_FILE"
            ;;

        "/get_log_install")
            send_file "$INSTALL_LOG_FILE"
            ;;

        "/catchup")
            catchup
            ;;

        "/monitor_agave")
            monitor_agave
            ;;

        "/validators")
            validators
            ;;

        "/log_service")
            CURRENT_STATE=$STATE_LOG
            generate_keyboard "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥ –ª–µ–≤–µ–ª" "ERR" "WARNING" "INFO"
            ;;

        "/halt_node")
            generate_dummy_keypair || return
            CURRENT_STATE=$STATE_HALT_DATETIME
            send_message "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-07-02T15:00)"
            ;;

        "/reboot")
            CURRENT_STATE=$STATE_REBOOT
            generate_keyboard "–í—ã —É–≤–µ—Ä–µ–Ω—ã?" "Yes" "No"
            ;;

        *)
            case "$CURRENT_STATE" in
                "$STATE_UPDATE" | "$STATE_UPDATE_2")
                    handle_update "$command"
                    ;;

                "$STATE_LOG" | "$STATE_LOG_2")
                    handle_log "$command"
                    ;;

                "$STATE_SERVICE" | "$STATE_SERVICE_UNSAFE")
                    handle_service "$command"
                    ;;

                "$STATE_HALT_DATETIME")
                    handle_halt_datetime "$command"
                    ;;

                "$STATE_REBOOT")
                    handle_reboot "$command"
                    ;;

                *)
                    send_message "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
                    ;;
            esac
            ;;

    esac
}

validators() {
    output=$(${SUDO_CMD} solana validators | awk '/Stake By Version:/,0' 2>&1)
    if [[ $? -eq 0 ]]; then
        echo "$output" | while IFS= read -r line; do send_message "$line" true; done
    else
        send_message "–û—à–∏–±–∫–∞: $output" true
    fi
}

catchup() {
    output=$(timeout -k 2 10 ${SUDO_CMD} solana catchup ${KEY_PAIR_PATH} http://127.0.0.1:8899/ 2>&1)
    if [[ $? -eq 0 ]]; then
        send_message "$output" true
        if [[ $output =~ us:([0-9]+) ]]; then us_slot=${BASH_REMATCH[1]}; fi
        if [[ $output =~ them:([0-9]+) ]]; then them_slot=${BASH_REMATCH[1]}; fi
        send_message "–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–ª–æ—Ç–∞–º–∏: $((us_slot - them_slot))" true
    else
        send_message "–û—à–∏–±–∫–∞: $output" true
    fi
}

declare -g current_service_action=""
handle_service() {
    local command=$1

    case "${CURRENT_STATE}" in
        "$STATE_SERVICE")
            case "$command" in
                start|stop|restart)
                    CURRENT_STATE=$STATE_SERVICE_UNSAFE
                    current_service_action=$command
                    generate_keyboard "–í—ã —É–≤–µ—Ä–µ–Ω—ã?" "Yes" "No"
                    ;;
                *)
                    if [[ "$command" == "version" ]]; then
                        version=$(curl -s http://127.0.0.1:8899 -X POST -H "Content-Type: application/json" \
                                -d '{"jsonrpc":"2.0", "id":1, "method":"getVersion"}' | jq -r '.result."solana-core"')
                        send_message "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $version" true
                    else
                        send_main_menu
                    fi
                    ;;
            esac
            ;;

        "$STATE_SERVICE_UNSAFE")
            if [[ "$command" == "Yes" ]]; then
                ${SUDO_CMD} systemctl ${current_service_action} ${SERVICE}
            else
                send_main_menu
            fi
            ;;
    esac
}

handle_halt_datetime() {
    local input="$1"

    if [[ "$input" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}$ ]]; then
        halt_datetime="$input"

        local ts=$(date -d "$halt_datetime UTC" +%s 2>/dev/null)
        if [[ $? -ne 0 ]]; then
            send_message "${NOK_ICON} –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2025-07-02T15:00"
            return
        fi

        local ts_minus_5=$((ts - 300))
        local ts_minus_1=$((ts - 60))
        local ts_plus_5=$((ts + 5))
        local ts_plus_60=$((ts + 60))

        local t5=$(date -d "@$ts_minus_5" "+%H:%M %Y-%m-%d")
        local t1=$(date -d "@$ts_minus_1" "+%H:%M %Y-%m-%d")
        local t0=$(date -d "@$ts" "+%H:%M %Y-%m-%d")
        local t_plus5=$(date -d "@$ts_plus_5" "+%H:%M %Y-%m-%d")
        local t_plus60=$(date -d "@$ts_plus_60" "+%H:%M %Y-%m-%d")

        echo "curl -s -X POST \"$TELEGRAM_SEND_URL\" -d \"chat_id=$BOT_ID&text=${WARNING_ICON} –ù–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\"" | at "$t5"
        echo "curl -s -X POST \"$TELEGRAM_SEND_URL\" -d \"chat_id=$BOT_ID&text=${WARNING_ICON} –ù–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É\"" | at "$t1"
        echo "curl -s -X POST \"$TELEGRAM_SEND_URL\" -d \"chat_id=$BOT_ID&text=${NOK_ICON} –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (—Å–º–µ–Ω–∞ identity)\"" | at "$t0"

        local command=""
        if [[ "$CLIENT" == "$CLIENT_AGAVE" ]]; then
            command="${SUDO_CMD} agave-validator --ledger $LEDGER_FOLDER set-identity $DUMMY_KEYPAIR_PATH"
        elif [[ "$CLIENT" == "$CLIENT_FIREDANCER" ]]; then
            command="${FIREDANCER_BIN} set-identity --config $CONFIG_PATH $DUMMY_KEYPAIR_PATH"
        else
            send_message "${NOK_ICON} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: $CLIENT"
            return
        fi

        echo "$command" | at "$t0"

        echo "
            SLOT_INFO=\$(${SUDO_CMD} agave-ledger-tool --ledger $LEDGER_FOLDER latest-optimistic-slots | grep -E '^[[:space:]]*[0-9]+')
            SLOT=\$(echo \$SLOT_INFO | awk '{print \$1}')
            HASH=\$(echo \$SLOT_INFO | awk '{print \$2}')
            TIME=\$(echo \$SLOT_INFO | awk '{print \$3}')
            TEXT=\"${OK_ICON} –ù–∞–π–¥–µ–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–ª–æ—Ç –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:%0Aüì¶ Slot: \$SLOT%0Aüîë Hash: \$HASH%0Aüïí Time: \$TIME\"
            curl -s -X POST \"$TELEGRAM_SEND_URL\" -d \"chat_id=$BOT_ID&text=\$TEXT&parse_mode=HTML\"
            " | at "$t_plus5"
        echo "
            ${SUDO_CMD} systemctl stop $SERVICE
            curl -s -X POST \"$TELEGRAM_SEND_URL\" -d \"chat_id=$BOT_ID&text=üõë –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $SERVICE\"
        " | at "$t_plus60"

        send_message "${OK_ICON} –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ ${halt_datetime} UTC" true
    else
        send_message "${NOK_ICON} –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2025-07-02T15:00"
    fi
}

declare -g current_version=""
handle_update() {
    local command=$1

    case "${CURRENT_STATE}" in
        "$STATE_UPDATE")
            if [[ $command =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                CURRENT_STATE=$STATE_UPDATE_2
                current_version=$command
                generate_keyboard "–í—ã–±–µ—Ä–∏—Ç–µ max-delinquent-stake" "5" "10" "15" "20" "25"
            else
                send_message "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω–∞ –≤–µ—Ä—Å–∏—è"
                send_version_menu
            fi
            ;;

        "$STATE_UPDATE_2")
            if [[ "$command" =~ ^[0-9]+$ ]] && ((command >= 0 && command <= 100)); then
                update_version "$current_version" "$command"
            else
                send_message "max-delinquent-stake –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100"
                generate_keyboard "–í—ã–±–µ—Ä–∏—Ç–µ max-delinquent-stake" "5" "10" "15" "20" "25"
            fi
            ;;
    esac
}

declare -g current_log_level="ERR"
handle_log() {
    local command=$1

    case "${CURRENT_STATE}" in
        "${STATE_LOG}")
            current_log_level=$command
            generate_keyboard "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤" "1" "2" "5" "10" "20"
            CURRENT_STATE=$STATE_LOG_2
            ;;

        "${STATE_LOG_2}")
            count=$command
            logs=$(${SUDO_CMD} journalctl -u ${SERVICE} --no-pager -n ${JOURNAL_COUNT} | grep " ${current_log_level} " | tail -n ${count})
            if [[ -z "$logs" ]]; then
                send_message "–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" true
            else
                send_message "–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${count} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ —É—Ä–æ–≤–Ω—è ${current_log_level}:" true
                echo "$logs" | while IFS= read -r line; do send_message "$line"; done
            fi
            ;;
    esac
}

handle_reboot() {
    local command=$1

    case "$command" in
        "Yes")
            send_message "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å–∏—Å—Ç–µ–º—É..." true
            ${SUDO_CMD} reboot || send_message "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
            ;;
        "No")
            ;;
        *)
            send_main_menu
            ;;
    esac
}

health_status() {
    local output="$1"
    local health=$(echo "$output" | grep -oP '\| \K([0-9]+ slots behind|unhealthy|ok)' | head -n1)

    case "$health" in
        unhealthy)
            send_message "${WARNING_ICON} –ù–æ–¥–∞ unhealthy" true
            ;;
        *"slots behind")
            delay=$(echo "$health" | grep -oP '^\d+')
            if [[ -n "$delay" ]]; then
                send_message "${WARNING_ICON} –ù–æ–¥–∞ –æ—Ç—Å—Ç–∞—ë—Ç –Ω–∞ $delay —Å–ª–æ—Ç–æ–≤" true
            else
                send_message "${WARNING_ICON} –ù–æ–¥–∞ –æ—Ç—Å—Ç–∞—ë—Ç, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ" true
            fi
            ;;
        ok|"")
            trimmed=$(echo "$output" | grep "Processed Slot" | tail -n 1)
            send_message "${OK_ICON} healthy: $trimmed" true
            ;;
        *)
            send_message "${WARNING_ICON} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–æ–¥—ã: $health" true
            ;;
    esac
}

monitor_agave() {
    local output=$(${SUDO_CMD} timeout 1 agave-validator --ledger ${LEDGER_FOLDER} monitor 2>&1)

    gossip_percent=$(grep -oP 'gossip_stake_percent: \K[0-9]+(\.[0-9]+)?' <<< "$output")
    if [[ -n "$gossip_percent" ]]; then
        send_message "üìä Gossip Stake Percent: ${gossip_percent}%" true
        return 0
    fi

    if grep -q "Processed Slot" <<< "$output"; then
        health_status "$output"
        return 0
    fi

    send_message "–°—Ç–∞—Ç—É—Å –Ω–æ–¥—ã: $output" true
}


update_version() {
    local current_version=$1
    local max_delinquent=$2

    TELEGRAM=1 ./private/update.sh "$current_version" "$max_delinquent"
}

run_loop() {
    if [[ -f "$ID_FILE" ]]; then
        last_update_id=$(cat "$ID_FILE")
    else
        last_update_id=0
    fi

    while true; do
        updates=$(get_updates $last_update_id)

        if [[ $(echo "$updates" | jq -r '.ok') == "false" ]]; then
            sleep 1
            continue
        fi

        results=$(echo "$updates" | jq -c '.result[]')

        for update in $results; do
            update_id=$(echo "$update" | jq -r '.update_id')

            if [ -z "$update_id" ] || [ "$update_id" -le "$last_update_id" ]; then
                continue
            fi

            last_update_id=$update_id
            echo "$last_update_id" > "$ID_FILE"

            command=$(echo $update | jq -r '.message.text')
            update $command
        done

        sleep 1
    done
}

main() {
    set_bot_commands

    run_loop
}

main "$@"
