#!/bin/bash

source ./config.sh

send_message_curl() {
    local message=$1
    local remove_keyboard=${2:-false}

    local payload="chat_id=$BOT_ID&text=$message"
    if [[ "$remove_keyboard" == "true" ]]; then
        payload="$payload&reply_markup=$(jq -nc '{remove_keyboard: true}')"
    fi

    echo $(curl -s -X POST $TELEGRAM_SEND_URL -d "$payload")
}

edit_message_curl() {
    local message=$1
    local message_id=$2
    echo $(curl -s -X POST $TELEGRAM_EDIT_URL -d chat_id=$BOT_ID -d "message_id=$message_id" -d text="$message")
}

delete_message() {
    local message_id=$1
    response=$(curl -s -X POST $TELEGRAM_DELETE_URL -d chat_id=$BOT_ID -d message_id=$message_id)

    if [[ $(echo "$response" | jq -r '.ok') != "true" ]]; then
        echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è $message_id"
    fi
}

animate() {
    local message=$1
    local message_id=$2
    local frames=("‚ó¢" "‚ó£" "‚ó§" "‚ó•")

    while true; do
        for frame in "${frames[@]}"; do
            edit_message_curl "${message} $frame" "$message_id" > /dev/null
            sleep 2
        done
    done
}

run_with_animation() {
    local command=$1
    local message=$2

    message_id=$(send_message_curl "$message" | jq '.result.message_id')

    animate "$message" "$message_id" &
    animation_pid=$!

    $command
    local exit_code=$?

    kill $animation_pid
    delete_message $message_id

    return $exit_code
}

output_message() {
    local message=$1
    local remove_keyboard=${2:-false}
    if [ "$TELEGRAM" == "1" ]; then
        response=$(send_message_curl "$message" "$remove_keyboard")
        if [[ $(echo "$response" | jq -r '.ok') != "true" ]]; then
            echo "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $message"
            return 1
        fi
    else
        echo "$message"
    fi
}

if [ -z "$1" ]; then
    VERSION_EXAMPLE=""
    if [[ $CLIENT == $CLIENT_FIREDANCER ]]; then
        VERSION_EXAMPLE="0.403.20113"
    elif [[ $CLIENT == $CLIENT_AGAVE ]]; then
        VERSION_EXAMPLE="2.0.13"
    fi
    output_message "–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä ${VERSION_EXAMPLE}"
    exit 1
fi

VERSION="v${1}"
MAX_DELINQUENT_STAKE=${2:-5}

format_duration() {
    local duration=$1
    local hours=$((duration / 3600))
    local minutes=$(((duration % 3600) / 60))
    local seconds=$((duration % 60))
    echo "${hours}—á:${minutes}–º:${seconds}—Å"
}

wait_for_restart_and_restart() {
    if [ "$MAX_DELINQUENT_STAKE" = "0" ]; then
        echo "MAX_DELINQUENT_STAKE=0 ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç"
        ${SUDO_CMD} systemctl restart ${SERVICE}
        return
    fi

    timeout -k 2 ${RESTART_WINDOW_TIMEOUT_S} ${SUDO_CMD} agave-validator --ledger ${LEDGER_FOLDER} \
        wait-for-restart-window --max-delinquent-stake $MAX_DELINQUENT_STAKE > /dev/null 2>&1

    if [ $? -eq 0 ]; then
        ${SUDO_CMD} systemctl restart ${SERVICE}
    else
        return 1
    fi
}

install_firedancer_deps() {
    ./deps.sh fetch >> "$INSTALL_LOG_FILE" 2>&1
    ./deps.sh check >> "$INSTALL_LOG_FILE" 2>&1
    ./deps.sh install >> "$INSTALL_LOG_FILE" 2>&1
}

make_firedancer(){
    make -j fdctl solana >> "$INSTALL_LOG_FILE" 2>&1
    return $?
}

install_firedancer() {
    local repo_url="https://github.com/firedancer-io/firedancer"
    local clean_version=${VERSION#v}

    if [[ -x "$FIREDANCER_BIN" ]]; then
        local current_version=$("$FIREDANCER_BIN" version 2>/dev/null | awk '{print $1}')

        if [[ "$current_version" == "$clean_version" ]]; then
            output_message "–í–µ—Ä—Å–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" | tee -a "$INSTALL_LOG_FILE"
            return 0
        fi
    fi

    rm -rf $INSTALL_LOG_FILE
    if [[ ! -d "$INSTALL_FD_DIR/.git" ]]; then
        output_message "–ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ $INSTALL_FD_DIR" | tee -a "$INSTALL_LOG_FILE"
        git clone  --recurse-submodules "$repo_url" "$INSTALL_FD_DIR" >> "$INSTALL_LOG_FILE" 2>&1
        if [[ $? -ne 0 ]]; then
            output_message "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" | tee -a "$INSTALL_LOG_FILE"
            return 1
        fi
    fi

    cd "$INSTALL_FD_DIR" || return 1

    git submodule sync
    git submodule update --init --recursive >> "$INSTALL_LOG_FILE" 2>&1
    if [[ $? -ne 0 ]]; then
        output_message "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–º–æ–¥—É–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å agave..." | tee -a "$INSTALL_LOG_FILE"

        git submodule deinit -f agave >> "$INSTALL_LOG_FILE" 2>&1
        rm -rf .git/modules/agave agave
        git submodule update --init --recursive >> "$INSTALL_LOG_FILE" 2>&1

        if [[ $? -ne 0 ]]; then
            output_message "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–º–æ–¥—É–ª—å agave." | tee -a "$INSTALL_LOG_FILE"
            return 1
        fi
    fi
    git fetch origin >> "$INSTALL_LOG_FILE" 2>&1
    git checkout "$VERSION" >> "$INSTALL_LOG_FILE" 2>&1
    if [[ $? -ne 0 ]]; then
        output_message "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ä—Å–∏—é $VERSION" | tee -a "$INSTALL_LOG_FILE"
        return 1
    fi

    if [ "$TELEGRAM" == "1" ]; then
        run_with_animation install_firedancer_deps "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π" || return 1
        run_with_animation make_firedancer "–ò–¥–µ—Ç —Å–±–æ—Ä–∫–∞" || return 1
    else
        output_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π" | tee -a "$INSTALL_LOG_FILE"
        install_firedancer_deps

        output_message "–ò–¥–µ—Ç —Å–±–æ—Ä–∫–∞" | tee -a "$INSTALL_LOG_FILE"
        make_firedancer
    fi

    if [[ $? -ne 0 ]]; then
        output_message "–û—à–∏–±–∫–∞: —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å" | tee -a "$INSTALL_LOG_FILE"
        return 1
    fi

    cd -

    local fdctl_version=$("${FIREDANCER_BIN}" version 2>/dev/null | awk '{print $1}')

    if [[ "$fdctl_version" != "$clean_version" ]]; then
        output_message "–û—à–∏–±–∫–∞: –≤–µ—Ä—Å–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: —Ç–µ–∫—É—â–∞—è=$fdctl_version, –æ–∂–∏–¥–∞–µ—Ç—Å—è=$clean_version" | tee -a "$INSTALL_LOG_FILE"
        tail -n 10 "$INSTALL_LOG_FILE"
        return 1
    fi

    return 0
}

install_agave() {
    sh -c "$(curl -sSfL https://release.anza.xyz/$VERSION/install)"
}

save_history() {
    echo "{\"date\": \"$(date)\", \"version\": \"${VERSION}\", \"client\": \"$CLIENT\", \"total_duration\": \"$(format_duration $TOTAL_DURATION)\", \"max-delinquent-stake\": \"$MAX_DELINQUENT_STAKE\"}" >> ${UPDATE_HISTORY_FILE}
}

check_agave_monitor_status() {
    local attempt=0
    local frames=("‚ó¢" "‚ó£" "‚ó§" "‚ó•")
    local frame_index=0
    local initial_text="‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã"
    local message_id=$(send_message_curl "$initial_text" | jq '.result.message_id')

    while (( attempt < MAX_ATTEMPTS_CHECK_SYNC )); do
        local frame=${frames[$frame_index]}
        frame_index=$(( (frame_index + 1) % ${#frames[@]} ))

        output=$(${SUDO_CMD} timeout 1 agave-validator --ledger "${LEDGER_FOLDER}" monitor 2>&1)

        gossip_percent=$(grep -oP 'gossip_stake_percent: \K[0-9]+(\.[0-9]+)?' <<< "$output")
        if [[ -n "$gossip_percent" ]]; then
            edit_message_curl "üìä Gossip Stake Percent: ${gossip_percent}%" "$message_id"
            return 0
        fi

        if ! echo "$output" | grep -q "Processed Slot"; then
            edit_message_curl "‚è≥ –ù–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è: $output $frame" "$message_id"
            ((attempt++))
            continue
        fi

        health=$(echo "$output" | grep -oP '\| \K([0-9]+ slots behind|unhealthy|ok)' | head -n1)

        case "$health" in
            ok|"")
                trimmed=$(echo "$output" | grep "Processed Slot" | tail -n 1)
                edit_message_curl "${OK_ICON} healthy: $trimmed" "$message_id"
                return 0
                ;;
            unhealthy)
                edit_message_curl "${WARNING_ICON} unhealthy $frame" "$message_id"
                ;;
            *"slots behind")
                delay=$(echo "$health" | grep -oP '^\d+')
                if [[ -n "$delay" ]]; then
                    edit_message_curl "${WARNING_ICON} –ù–æ–¥–∞ –æ—Ç—Å—Ç–∞—ë—Ç –Ω–∞ $delay —Å–ª–æ—Ç–æ–≤ $frame" "$message_id"
                else
                    edit_message_curl "${WARNING_ICON} –ù–æ–¥–∞ –æ—Ç—Å—Ç–∞—ë—Ç (–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É) $frame" "$message_id"
                fi
                ;;
            *)
                edit_message_curl "${initial_text} $frame" "$message_id"
                ;;
        esac

        ((attempt++))
    done

    edit_message_curl "${NOK_ICON} –ù–æ–¥–∞ –Ω–µ –ø–µ—Ä–µ—à–ª–∞ –≤ healthy –∑–∞ $MAX_ATTEMPTS_CHECK_SYNC –ø–æ–ø—ã—Ç–æ–∫, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω —Ä–µ–±—É—Ç" "$message_id"
    return 1
}

install_client() {
    if [[ $CLIENT == $CLIENT_FIREDANCER ]]; then
        if ! install_firedancer; then
            output_message "–û—à–∏–±–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Firedancer –Ω–µ —É–¥–∞–ª–∞—Å—å."
            return 1
        fi
    elif [[ $CLIENT == $CLIENT_AGAVE ]]; then
        install_agave
    else
        output_message "–ó–∞–¥–∞–Ω –Ω–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"
        return 1
    fi
}

main() {
    output_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${CLIENT} –≤–µ—Ä—Å–∏–∏: ${VERSION}" true

    local start_time=$(date +%s)

    if ! install_client; then
        return 1
    fi

    output_message "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ $CLIENT $VERSION –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ $(format_duration $(( $(date +%s) - $start_time )))."

    local mins=$(( (RESTART_WINDOW_TIMEOUT_S + 59) / 60 ))

    if [ "$TELEGRAM" == "1" ]; then
        run_with_animation wait_for_restart_and_restart "–û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞($MAX_DELINQUENT_STAKE) –º–∞–∫—Å ${mins} –º–∏–Ω—É—Ç"
    else
        output_message "–û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ (max-delinquent-stake: $MAX_DELINQUENT_STAKE) –º–∞–∫—Å ${mins} –º–∏–Ω—É—Ç"
        wait_for_restart_and_restart
    fi || {
        output_message "‚õî –û–∫–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ ${mins} –º–∏–Ω—É—Ç"
        return 1
    }

    output_message "–í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–µ—Ä–∑–∞–ø—É—â–µ–Ω –∑–∞ $(format_duration $(( $(date +%s) - $start_time ))), –æ–∂–∏–¥–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."
    if [ "$TELEGRAM" == "1" ]; then
        if check_agave_monitor_status; then
            output_message "#update: $CLIENT –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ ${VERSION}, –¥–∞—Ç–∞: $(date). –æ–±—â–µ–µ –≤—Ä–µ–º—è: $(format_duration $(( $(date +%s) - $start_time )))."
            save_history
        fi
    fi
}

main "$@"
